package org.jwebap.plugin.tracer.jdbc;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.json.JSONObject;
import org.json.JSONString;
import org.jwebap.core.StatistableTrace;
import org.jwebap.core.Trace;
import org.jwebap.core.TraceKey;
import org.jwebap.core.TraceLiftcycleManager;
import org.jwebap.util.SQLConvertor;

/**
 * 提供最基本的连接代理,实现一般的资源释放以及事务管理功能,以及资源跟踪
 */
public class ProxyConnection extends StatistableTrace implements Connection, JSONString {

	private Connection _delegate;

	/**
	 * 运行轨迹容器
	 */
	private transient TraceLiftcycleManager _container = null;

	/**
	 * 连接关闭标志
	 */
	protected boolean _closed = false;

	/**
	 * constructer
	 * @param container
	 * @param delegate
	 * @param listeners
	 */
	public ProxyConnection(TraceLiftcycleManager container, Connection delegate, ConnectionEventListener[] listeners) {
		_delegate = delegate;
		_container = container;

		StatistableTrace.InnerKey key = new StatistableTrace.InnerKey(this.toString());
		setKey(key);

		_container.activateTrace(JdbcComponent.DB_TRACE_TYPE, this);

		try {
			for (int i = 0; i < listeners.length; i++) {
				ConnectionEventListener listener = (ConnectionEventListener) listeners[i];
				listener.fire(this);
			}
		} catch (Throwable e) {

		}

	}

	/**
	 * @param delegate
	 * @roseuid 453897940148
	 */
	public void setDelegate(Connection delegate) {
		_delegate = delegate;
	}

	/**
	 * 关闭连接，同时关闭轨迹
	 */
	public void close() throws SQLException {
		try {
			passivate();

		} finally {
			if (_delegate != null) {
				_delegate.close();
			}

			// 注意：当关闭资源时可以不必清空trace但是必须把底层的代理删除
			// 因为它有可能被当成一个trace保存起来
			_delegate = null;
		}
	}

	public boolean isClosed() throws SQLException {
		// ||_delegate.isClosed()
		if (_closed) {
			return true;
		}
		return false;
	}

	protected void checkOpen() throws SQLException {
		if (isClosed() || _delegate == null) {
			throw new SQLException("Connection is closed.");
		}
	}

	protected void passivate() throws SQLException {
		try {

			Trace[] statements = getChildTraces();

			for (int i = 0; i < statements.length; i++) {
				try {
					Statement set = (Statement) statements[i];
					set.close();
				} catch (Exception e) {

				}
			}

			_container.inactivateTrace(JdbcComponent.DB_TRACE_TYPE, this);

		} finally {
			_closed = true;
			inActive();
		}

	}

	public Statement createStatement() throws SQLException {
		checkOpen();
		return new ProxyStatement(this, _delegate.createStatement());
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		checkOpen();
		return new ProxyStatement(this, _delegate.createStatement(resultSetType, resultSetConcurrency));
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		checkOpen();
		return new ProxyStatement(this, _delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		checkOpen();
		return new ProxyPreparedStatement(this, _delegate.prepareStatement(sql), sql);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		checkOpen();
		return new ProxyPreparedStatement(this, _delegate.prepareStatement(sql, autoGeneratedKeys), sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		checkOpen();
		return new ProxyPreparedStatement(this, _delegate.prepareStatement(sql, resultSetType, resultSetConcurrency), sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		checkOpen();
		return new ProxyPreparedStatement(this, _delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		checkOpen();
		return new ProxyPreparedStatement(this, _delegate.prepareStatement(sql, columnIndexes), sql);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		checkOpen();
		return new ProxyCallableStatement(this, _delegate.prepareCall(sql), sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		checkOpen();
		return new ProxyCallableStatement(this, _delegate.prepareCall(sql, resultSetType, resultSetConcurrency), sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		checkOpen();
		return new ProxyCallableStatement(this, _delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);

	}

	/**
	 * 返回轨迹对应的Json对象
	 * 
	 * @return
	 */
	public String toJSONString() {
		Map<String, String> map = new HashMap<String, String>();
		SQLConvertor sqlConcertor = new SQLConvertor();

		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String createTime = "--:--";
		String destroyTime = "--:--";
		if (getCreatedTime() > 0) {
			createTime = format.format(new Timestamp(getCreatedTime()));
		}
		if (getInactiveTime() > 0) {
			destroyTime = format.format(new Timestamp(getInactiveTime()));
		}
		map.put("isClosed", getInactiveTime() > 0 ? "closed" : "opened");
		map.put("cost", String.valueOf(getActiveTime()));
		map.put("createTime", createTime);
		map.put("destoryTime", destroyTime);
		// map.put("count", String.valueOf(getCount()));

		// jdbc轨迹的详细信息
		String detail = getStackTracesDetail();
		map.put("detail", detail.replaceAll("\n", "<br/>"));
		String sqls = "";
		// SQL语句的性能级别, 0-10ms为很快，10-100为良好
		// 100-500ms为一般，500-1000ms为较慢，大于1s的为慢语句
		String sqlGrade = "--";
		// 获取返回的记录数
		int recordCounts = 0;
		Trace[] ss = getChildTraces();
		for (int i = 0; i < ss.length; i++) {
			sqls += "语句执行的时间段：" + format.format(new java.util.Date(ss[i].getCreatedTime())) + " 至 "
					+ (ss[i].getInactiveTime() > 0 ? format.format(new java.util.Date(ss[i].getInactiveTime())) : "--:--");
			sqls += "<br/><br/>";
			Trace[] qs = ss[i].getChildTraces();
			for (int k = 0; k < qs.length; k++) {
				recordCounts += qs[k].getCount();
				Trace sqld = (Trace) qs[k];
				int timeRank = 0;

				if (getActiveTime() > 0) {
					timeRank = (int) (((double) sqld.getActiveTime() / (double) getActiveTime()) * 100);
				}
				sqls += "耗时：<font color=red>" + sqld.getActiveTime() + "ms &nbsp;&nbsp;" + "</font>时间消耗比例：<font color=red>" + timeRank + "%</font><br/><br/>";
				sqls += "SQL：" + sqlConcertor.highlightSql(sqld.getContent()) + "<br/>";
				if (sqld.getActiveTime() >= 0 && sqld.getActiveTime() <= 10) {
					sqlGrade = "<font color='darkgreen'>很快</font>";
				} else if (sqld.getActiveTime() > 10 && sqld.getActiveTime() <= 100) {
					sqlGrade = "<font color='green'>良好</font>";
				} else if (sqld.getActiveTime() > 100 && sqld.getActiveTime() <= 500) {
					sqlGrade = "<font color='brown'>一般</font>";
				} else if (sqld.getActiveTime() > 500 && sqld.getActiveTime() <= 1000) {
					sqlGrade = "<font color='darkbrown'>较慢</font>";
				} else {
					sqlGrade = "<font color='red'>慢语句，需优化</font>";
				}
			}
		}
		map.put("sqlGrade", sqlGrade);
		if (recordCounts <= 1) {
			map.put("count", "0");
		} else {
			map.put("count", String.valueOf(recordCounts - 1));
		}
		map.put("sqls", sqls);
		String thread = ((TraceKey) getKey()).getThreadKey().toString();
		map.put("thread", thread);
		return new JSONObject(map).toString();
	}

	// ///////////////////////////////////////////////////////////////////////////////////////
	public int getHoldability() throws SQLException {
		checkOpen();
		return _delegate.getHoldability();
	}

	public int getTransactionIsolation() throws SQLException {
		checkOpen();
		return _delegate.getTransactionIsolation();
	}

	public void clearWarnings() throws SQLException {
		checkOpen();
		_delegate.clearWarnings();

	}

	public void commit() throws SQLException {
		checkOpen();
		_delegate.commit();

	}

	public void rollback() throws SQLException {
		checkOpen();
		_delegate.rollback();

	}

	public boolean getAutoCommit() throws SQLException {
		checkOpen();
		return _delegate.getAutoCommit();
	}

	public boolean isReadOnly() throws SQLException {
		checkOpen();
		return _delegate.isReadOnly();
	}

	public void setHoldability(int holdability) throws SQLException {
		checkOpen();
		_delegate.setHoldability(holdability);

	}

	public void setTransactionIsolation(int level) throws SQLException {
		checkOpen();
		_delegate.setTransactionIsolation(level);

	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		checkOpen();
		_delegate.setAutoCommit(autoCommit);

	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		checkOpen();
		_delegate.setReadOnly(readOnly);
	}

	public String getCatalog() throws SQLException {
		checkOpen();
		return _delegate.getCatalog();
	}

	public void setCatalog(String catalog) throws SQLException {
		checkOpen();
		_delegate.setCatalog(catalog);
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		checkOpen();
		return _delegate.getMetaData();
	}

	public SQLWarning getWarnings() throws SQLException {
		checkOpen();
		return _delegate.getWarnings();
	}

	public Savepoint setSavepoint() throws SQLException {
		checkOpen();
		return _delegate.setSavepoint();
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		checkOpen();
		_delegate.releaseSavepoint(savepoint);
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		checkOpen();
		_delegate.rollback(savepoint);

	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		checkOpen();
		return _delegate.getTypeMap();
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		checkOpen();
		_delegate.setTypeMap(map);
	}

	public String nativeSQL(String sql) throws SQLException {
		checkOpen();
		return _delegate.nativeSQL(sql);
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		checkOpen();
		return _delegate.setSavepoint(name);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		checkOpen();
		return _delegate.prepareStatement(sql, columnNames);
	}

	@SuppressWarnings("rawtypes")
	public boolean isWrapperFor(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Object unwrap(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setClientInfo(String name, String value) throws SQLClientInfoException {
		// TODO Auto-generated method stub

	}

	public void setClientInfo(Properties properties) throws SQLClientInfoException {
		// TODO Auto-generated method stub

	}

	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}
